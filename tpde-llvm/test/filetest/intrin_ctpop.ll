; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2025 Contributors to TPDE <https://tpde.org>
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64
; XFAIL: llvm20.1

define i8 @ctpop_i8(i8 %0) {
; X64-LABEL: <ctpop_i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, dil
; X64-NEXT:    mov eax, edi
; X64-NEXT:    shr eax
; X64-NEXT:    and eax, 0x55555555
; X64-NEXT:    sub edi, eax
; X64-NEXT:    mov eax, edi
; X64-NEXT:    and eax, 0x33333333
; X64-NEXT:    shr edi, 0x2
; X64-NEXT:    and edi, 0x33333333
; X64-NEXT:    add edi, eax
; X64-NEXT:    mov eax, edi
; X64-NEXT:    shr eax, 0x4
; X64-NEXT:    add eax, edi
; X64-NEXT:    and eax, 0xf0f0f0f
; X64-NEXT:    imul eax, eax, 0x1010101
; X64-NEXT:    shr eax, 0x18
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ctpop_i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    fmov s0, w0
; ARM64-NEXT:    cnt v0.8b, v0.8b
; ARM64-NEXT:    uaddlv h0, v0.8b
; ARM64-NEXT:    fmov w0, s0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %res = call i8 @llvm.ctpop.i8(i8 %0)
  ret i8 %res
}

define i16 @ctpop_i16(i16 %0) {
; X64-LABEL: <ctpop_i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, di
; X64-NEXT:    mov eax, edi
; X64-NEXT:    shr eax
; X64-NEXT:    and eax, 0x55555555
; X64-NEXT:    sub edi, eax
; X64-NEXT:    mov eax, edi
; X64-NEXT:    and eax, 0x33333333
; X64-NEXT:    shr edi, 0x2
; X64-NEXT:    and edi, 0x33333333
; X64-NEXT:    add edi, eax
; X64-NEXT:    mov eax, edi
; X64-NEXT:    shr eax, 0x4
; X64-NEXT:    add eax, edi
; X64-NEXT:    and eax, 0xf0f0f0f
; X64-NEXT:    imul eax, eax, 0x1010101
; X64-NEXT:    shr eax, 0x18
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ctpop_i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    fmov s0, w0
; ARM64-NEXT:    cnt v0.8b, v0.8b
; ARM64-NEXT:    uaddlv h0, v0.8b
; ARM64-NEXT:    fmov w0, s0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %res = call i16 @llvm.ctpop.i16(i16 %0)
  ret i16 %res
}

define i23 @ctpop_i23(i23 %0) {
; X64-LABEL: <ctpop_i23>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    and edi, 0x7fffff
; X64-NEXT:    mov eax, edi
; X64-NEXT:    shr eax
; X64-NEXT:    and eax, 0x55555555
; X64-NEXT:    sub edi, eax
; X64-NEXT:    mov eax, edi
; X64-NEXT:    and eax, 0x33333333
; X64-NEXT:    shr edi, 0x2
; X64-NEXT:    and edi, 0x33333333
; X64-NEXT:    add edi, eax
; X64-NEXT:    mov eax, edi
; X64-NEXT:    shr eax, 0x4
; X64-NEXT:    add eax, edi
; X64-NEXT:    and eax, 0xf0f0f0f
; X64-NEXT:    imul eax, eax, 0x1010101
; X64-NEXT:    shr eax, 0x18
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ctpop_i23>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ubfx w0, w0, #0, #23
; ARM64-NEXT:    fmov s0, w0
; ARM64-NEXT:    cnt v0.8b, v0.8b
; ARM64-NEXT:    uaddlv h0, v0.8b
; ARM64-NEXT:    fmov w0, s0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %res = call i23 @llvm.ctpop.i23(i23 %0)
  ret i23 %res
}

define i32 @ctpop_i32(i32 %0) {
; X64-LABEL: <ctpop_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, edi
; X64-NEXT:    shr eax
; X64-NEXT:    and eax, 0x55555555
; X64-NEXT:    sub edi, eax
; X64-NEXT:    mov eax, edi
; X64-NEXT:    and eax, 0x33333333
; X64-NEXT:    shr edi, 0x2
; X64-NEXT:    and edi, 0x33333333
; X64-NEXT:    add edi, eax
; X64-NEXT:    mov eax, edi
; X64-NEXT:    shr eax, 0x4
; X64-NEXT:    add eax, edi
; X64-NEXT:    and eax, 0xf0f0f0f
; X64-NEXT:    imul eax, eax, 0x1010101
; X64-NEXT:    shr eax, 0x18
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ctpop_i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    fmov s0, w0
; ARM64-NEXT:    cnt v0.8b, v0.8b
; ARM64-NEXT:    uaddlv h0, v0.8b
; ARM64-NEXT:    fmov w0, s0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %res = call i32 @llvm.ctpop.i32(i32 %0)
  ret i32 %res
}

define i37 @ctpop_i37(i37 %0) {
; X64-LABEL: <ctpop_i37>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movabs rax, 0x1fffffffff
; X64-NEXT:    and rdi, rax
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    shr rax
; X64-NEXT:    movabs rcx, 0x5555555555555555
; X64-NEXT:    and rcx, rax
; X64-NEXT:    sub rdi, rcx
; X64-NEXT:    movabs rax, 0x3333333333333333
; X64-NEXT:    mov rcx, rdi
; X64-NEXT:    and rcx, rax
; X64-NEXT:    shr rdi, 0x2
; X64-NEXT:    and rax, rdi
; X64-NEXT:    add rax, rcx
; X64-NEXT:    mov rcx, rax
; X64-NEXT:    shr rcx, 0x4
; X64-NEXT:    add rcx, rax
; X64-NEXT:    movabs rdx, 0xf0f0f0f0f0f0f0f
; X64-NEXT:    and rdx, rcx
; X64-NEXT:    movabs rax, 0x101010101010101
; X64-NEXT:    imul rax, rdx
; X64-NEXT:    shr rax, 0x38
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ctpop_i37>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ubfx x0, x0, #0, #37
; ARM64-NEXT:    fmov d0, x0
; ARM64-NEXT:    cnt v0.8b, v0.8b
; ARM64-NEXT:    uaddlv h0, v0.8b
; ARM64-NEXT:    fmov w0, s0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %res = call i37 @llvm.ctpop.i37(i37 %0)
  ret i37 %res
}

define i64 @ctpop_i64(i64 %0) {
; X64-LABEL: <ctpop_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    shr rax
; X64-NEXT:    movabs rcx, 0x5555555555555555
; X64-NEXT:    and rcx, rax
; X64-NEXT:    sub rdi, rcx
; X64-NEXT:    movabs rax, 0x3333333333333333
; X64-NEXT:    mov rcx, rdi
; X64-NEXT:    and rcx, rax
; X64-NEXT:    shr rdi, 0x2
; X64-NEXT:    and rax, rdi
; X64-NEXT:    add rax, rcx
; X64-NEXT:    mov rcx, rax
; X64-NEXT:    shr rcx, 0x4
; X64-NEXT:    add rcx, rax
; X64-NEXT:    movabs rdx, 0xf0f0f0f0f0f0f0f
; X64-NEXT:    and rdx, rcx
; X64-NEXT:    movabs rax, 0x101010101010101
; X64-NEXT:    imul rax, rdx
; X64-NEXT:    shr rax, 0x38
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ctpop_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    fmov d0, x0
; ARM64-NEXT:    cnt v0.8b, v0.8b
; ARM64-NEXT:    uaddlv h0, v0.8b
; ARM64-NEXT:    fmov w0, s0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %res = call i64 @llvm.ctpop.i64(i64 %0)
  ret i64 %res
}

