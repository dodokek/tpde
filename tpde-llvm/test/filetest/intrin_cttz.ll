; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2025 Contributors to TPDE <https://tpde.org>
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64
; XFAIL: llvm20.1

declare i8   @llvm.cttz.i8  (i8, i1)
declare i16   @llvm.cttz.i16  (i16, i1)
declare i32   @llvm.cttz.i32  (i32, i1)
declare i64   @llvm.cttz.i64  (i64, i1)

define void @cttz_i8(i8 %0) {
; X64-LABEL: <cttz_i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    or edi, 0x100
; X64-NEXT:    bsf eax, edi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cttz_i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    orr w0, w0, #0x100
; ARM64-NEXT:    rbit w0, w0
; ARM64-NEXT:    clz w1, w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = call i8 @llvm.cttz.i8(i8 %0, i1 0)
    ret void
}

define void @cttz_i8_zero_poison(i8 %0) {
; X64-LABEL: <cttz_i8_zero_poison>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    bsf edi, edi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cttz_i8_zero_poison>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    rbit w0, w0
; ARM64-NEXT:    clz w1, w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = call i8 @llvm.cttz.i8(i8 %0, i1 1)
    ret void
}

define void @cttz_i16(i16 %0) {
; X64-LABEL: <cttz_i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    or edi, 0x10000
; X64-NEXT:    bsf eax, edi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cttz_i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    orr w0, w0, #0x10000
; ARM64-NEXT:    rbit w0, w0
; ARM64-NEXT:    clz w1, w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = call i16 @llvm.cttz.i16(i16 %0, i1 0)
    ret void
}

define void @cttz_i16_zero_poison(i16 %0) {
; X64-LABEL: <cttz_i16_zero_poison>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    bsf edi, edi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cttz_i16_zero_poison>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    rbit w0, w0
; ARM64-NEXT:    clz w1, w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = call i16 @llvm.cttz.i16(i16 %0, i1 1)
    ret void
}

define void @cttz_i32(i32 %0) {
; X64-LABEL: <cttz_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    test edi, edi
; X64-NEXT:    je <L0>
; X64-NEXT:    bsf eax, edi
; X64-NEXT:    jmp <L1>
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x20
; X64-NEXT:  <L1>:
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cttz_i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    rbit w0, w0
; ARM64-NEXT:    clz w1, w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = call i32 @llvm.cttz.i32(i32 %0, i1 0)
    ret void
}

define void @cttz_i32_zero_poison(i32 %0) {
; X64-LABEL: <cttz_i32_zero_poison>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    bsf edi, edi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cttz_i32_zero_poison>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    rbit w0, w0
; ARM64-NEXT:    clz w1, w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = call i32 @llvm.cttz.i32(i32 %0, i1 1)
    ret void
}

define void @cttz_i64(i64 %0) {
; X64-LABEL: <cttz_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    test rdi, rdi
; X64-NEXT:    je <L0>
; X64-NEXT:    bsf rax, rdi
; X64-NEXT:    jmp <L1>
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x40
; X64-NEXT:  <L1>:
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cttz_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    rbit x0, x0
; ARM64-NEXT:    clz x1, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = call i64 @llvm.cttz.i64(i64 %0, i1 0)
    ret void
}

define void @cttz_i64_zero_poison(i64 %0) {
; X64-LABEL: <cttz_i64_zero_poison>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    bsf rdi, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cttz_i64_zero_poison>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    rbit x0, x0
; ARM64-NEXT:    clz x1, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = call i64 @llvm.cttz.i64(i64 %0, i1 1)
    ret void
}

define void @cttz_i32_no_salvage(i32 %0) {
; X64-LABEL: <cttz_i32_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    test edi, edi
; X64-NEXT:    mov ecx, edi
; X64-NEXT:    je <L0>
; X64-NEXT:    bsf eax, ecx
; X64-NEXT:    jmp <L1>
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x20
; X64-NEXT:  <L1>:
; X64-NEXT:    test edi, edi
; X64-NEXT:    je <L2>
; X64-NEXT:    bsf eax, edi
; X64-NEXT:    jmp <L3>
; X64-NEXT:  <L2>:
; X64-NEXT:    mov eax, 0x20
; X64-NEXT:  <L3>:
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cttz_i32_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    rbit w1, w0
; ARM64-NEXT:    clz w2, w1
; ARM64-NEXT:    rbit w0, w0
; ARM64-NEXT:    clz w1, w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = call i32 @llvm.cttz.i32(i32 %0, i1 0)
    %2 = call i32 @llvm.cttz.i32(i32 %0, i1 0)
    ret void
}

define void @cttz_i64_no_salvage(i64 %0) {
; X64-LABEL: <cttz_i64_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    test rdi, rdi
; X64-NEXT:    mov rcx, rdi
; X64-NEXT:    je <L0>
; X64-NEXT:    bsf rax, rcx
; X64-NEXT:    jmp <L1>
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x40
; X64-NEXT:  <L1>:
; X64-NEXT:    test rdi, rdi
; X64-NEXT:    je <L2>
; X64-NEXT:    bsf rax, rdi
; X64-NEXT:    jmp <L3>
; X64-NEXT:  <L2>:
; X64-NEXT:    mov eax, 0x40
; X64-NEXT:  <L3>:
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cttz_i64_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    rbit x1, x0
; ARM64-NEXT:    clz x2, x1
; ARM64-NEXT:    rbit x0, x0
; ARM64-NEXT:    clz x1, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = call i64 @llvm.cttz.i64(i64 %0, i1 0)
    %2 = call i64 @llvm.cttz.i64(i64 %0, i1 0)
    ret void
}

define void @cttz_i16_no_salvage(i16 %0) {
; X64-LABEL: <cttz_i16_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, edi
; X64-NEXT:    or eax, 0x10000
; X64-NEXT:    bsf ecx, eax
; X64-NEXT:    or edi, 0x10000
; X64-NEXT:    bsf eax, edi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cttz_i16_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    orr w1, w0, #0x10000
; ARM64-NEXT:    rbit w1, w1
; ARM64-NEXT:    clz w2, w1
; ARM64-NEXT:    orr w0, w0, #0x10000
; ARM64-NEXT:    rbit w0, w0
; ARM64-NEXT:    clz w1, w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:

    %1 = call i16 @llvm.cttz.i16(i16 %0, i1 0)
    %2 = call i16 @llvm.cttz.i16(i16 %0, i1 0)
    ret void
}
