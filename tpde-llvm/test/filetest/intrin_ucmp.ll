; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2025 Contributors to TPDE <https://tpde.org>
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64
; XFAIL: llvm19.1

define i17 @ucmpi17(i17 %0, i17 %1) {
; X64-LABEL: <ucmpi17>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    and edi, 0x1ffff
; X64-NEXT:    and esi, 0x1ffff
; X64-NEXT:    cmp edi, esi
; X64-NEXT:    seta al
; X64-NEXT:    sbb al, 0x0
; X64-NEXT:    movsx rax, al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ucmpi17>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ubfx w0, w0, #0, #17
; ARM64-NEXT:    ubfx w1, w1, #0, #17
; ARM64-NEXT:    cmp w0, w1
; ARM64-NEXT:    cset w0, hi
; ARM64-NEXT:    csinv w0, w0, wzr, hs
; ARM64-NEXT:    sxtw x1, w0
; ARM64-NEXT:    mov w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %res = call i17 @llvm.ucmp(i17 %0, i17 %1)
  ret i17 %res
}

define i32 @ucmpi32(i32 %0, i32 %1) {
; X64-LABEL: <ucmpi32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, esi
; X64-NEXT:    seta al
; X64-NEXT:    sbb al, 0x0
; X64-NEXT:    movsx rax, al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ucmpi32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, w1
; ARM64-NEXT:    cset w0, hi
; ARM64-NEXT:    csinv w0, w0, wzr, hs
; ARM64-NEXT:    sxtw x1, w0
; ARM64-NEXT:    mov w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %res = call i32 @llvm.ucmp(i32 %0, i32 %1)
  ret i32 %res
}

define i37 @ucmpi37(i37 %0, i37 %1) {
; X64-LABEL: <ucmpi37>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movabs rax, 0x1fffffffff
; X64-NEXT:    and rdi, rax
; X64-NEXT:    movabs rax, 0x1fffffffff
; X64-NEXT:    and rsi, rax
; X64-NEXT:    cmp rdi, rsi
; X64-NEXT:    seta al
; X64-NEXT:    sbb al, 0x0
; X64-NEXT:    movsx rax, al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ucmpi37>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ubfx x0, x0, #0, #37
; ARM64-NEXT:    ubfx x1, x1, #0, #37
; ARM64-NEXT:    cmp x0, x1
; ARM64-NEXT:    cset w0, hi
; ARM64-NEXT:    csinv w0, w0, wzr, hs
; ARM64-NEXT:    sxtw x1, w0
; ARM64-NEXT:    mov x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %res = call i37 @llvm.ucmp(i37 %0, i37 %1)
  ret i37 %res
}

define i64 @ucmpi64(i64 %0, i64 %1) {
; X64-LABEL: <ucmpi64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp rdi, rsi
; X64-NEXT:    seta al
; X64-NEXT:    sbb al, 0x0
; X64-NEXT:    movsx rax, al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ucmpi64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, x1
; ARM64-NEXT:    cset w0, hi
; ARM64-NEXT:    csinv w0, w0, wzr, hs
; ARM64-NEXT:    sxtw x1, w0
; ARM64-NEXT:    mov x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %res = call i64 @llvm.ucmp(i64 %0, i64 %1)
  ret i64 %res
}
